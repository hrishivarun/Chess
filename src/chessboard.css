*{
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;
}

:root{
    --width: 500px;
    --height: 100px;
}
body {
    background-color: lightslategrey;
    font-size: 20px;
}
h1{
    font-size: 2em;
    background-color: grey;
    width: 50%;
    display: flex;
    align-content: center;
    color:black;
    box-shadow: 10px 5px 10px black;
}
p{
    text-align: center;
}
button{
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    font-size: 1.2rem;
    font-weight: 500;
    background-color: blueviolet;
    color: white;
    width: 150px;
    padding: 10px;
    border-radius: 5px;
    margin: 20px calc(50vw - calc(150px / 2));
}
#sudoku {
    box-sizing: border-box;
    color: yellow;
    width: min(90vw, 90vh); /* Use the smaller of 90% viewport width or height */
    height: min(90vw, 90vh); /* Keep it square */
    max-width: 560px; /* Optional: set a maximum size */
    max-height: 560px;
    background-color: black;
    border: min(1.8vw, 1.8vh, 10px) double darkblue; /* Responsive border */
    margin: 2vh auto; /* Center horizontally with some top margin */
    display: grid; /* Add this - you had it commented out */
    grid-template-columns: repeat(8, 1fr); /* 8 equal columns */
    grid-template-rows: repeat(8, 1fr); /* 8 equal rows */
    gap: 0;
}

.odd, .even, .white, .black {
    display: flex;
    align-items: center;
    justify-content: center;
    aspect-ratio: 1; /* Keeps squares perfectly square */
    width: 100%; /* Take full grid cell width */
    height: 100%; /* Take full grid cell height */
    font-size: min(4vw, 4vh, 2.5rem); /* Responsive font size for pieces */
}

.odd {
    background-color: white;
    color: darkslategray;
}

.even {
    background-color: darkslategray;
    color: darkred;
}

/* If you're using images for pieces, make them responsive too */
.odd img, .even img, .white img, .black img {
    width: 80%; /* Take 80% of the square size */
    height: 80%;
    object-fit: contain; /* Maintain aspect ratio */
}


.announcement{
    display: none;
    box-sizing: content-box;
    font-size: 2rem;
    font-weight: bold;
    text-align: center;
    width: 571px;
    padding: 10px 0;
    background-color: black;
    border-radius: 10px;
    color: white;
    margin: 10px calc(calc(100vw - 571px) / 2);

}

/* .hover{
    background-color: chocolate;
}
.checked{
    background-color: red;
}
.selected{
    background-color: darkblue;
}
.potential-position{
    background-color: brown;
} */

/* Make squares position-relative for pseudo-elements */
.odd, .even {
    position: relative;
  }
  
  /* Hover: soft golden overlay */
  .hover::before {
    content: '';
    position: absolute; top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(240,208,80,0.3);
    pointer-events: none;
  }
  
  /* Checked: pulsing red glow */
  .checked {
    animation: lichessCheckPulse 1.5s infinite;
  }
  @keyframes lichessCheckPulse {
    0%,100% { box-shadow: 0 0 0 2px rgba(255,68,68,.8), 0 0 15px rgba(255,68,68,.6); }
    50% { box-shadow: 0 0 0 4px rgba(255,68,68,1), 0 0 25px rgba(255,68,68,.8); }
  }
  
  /* Selected: golden inset border + center dot */
  .selected {
    box-shadow: inset 0 0 0 3px #f0d050, 0 0 10px rgba(240,208,80,.5);
  }
  .selected::after {
    content: ''; position: absolute; width: 12px; height: 12px;
    background: #f0d050; border-radius:50%;
    top:50%; left:50%; transform: translate(-50%,-50%);
    pointer-events: none;
  }
  
  /* Potential-position: green dot or capture ring */
  .potential-position::before {
    content: ''; position: absolute; top:50%; left:50%;
    width:22px; height:22px; background:rgba(130,151,105,.9);
    border-radius:50%; transform: translate(-50%,-50%);
    pointer-events: none;
  }
  .potential-position.capture::before {
    width:75%; height:75%; background:transparent;
    border:4px solid rgba(130,151,105,.9); border-radius:12%;
  }
  

.parent{
    margin-left: calc( calc(100vw / 2) - calc(var(--width)/2));
    margin-top: calc(calc(100vh/2) - calc(var(--height)/2));
    width: var(--width);
    height: calc(3*var(--height));
    background-color: yellow;
    display: flex;
    flex-direction: row-reverse;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
}
.child{
    position: relative;
    height: 100px;
    background-color: yellowgreen;
    font-size: 30px;
}